[package]
name = "namada"
description = "The main Namada library crate"
resolver = "2"
authors.workspace = true
edition.workspace = true
documentation.workspace = true
homepage.workspace = true
keywords.workspace = true
license.workspace = true
readme.workspace = true
repository.workspace = true
version.workspace = true

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[features]
default = ["wasm-runtime"]
mainnet = ["namada_core/mainnet"]
std = ["namada_sdk/std"]
wasm-runtime = [
  "namada_core/wasm-runtime",
  "loupe",
  "parity-wasm",
  "rayon",
  "wasm-instrument",
  "wasmer-cache",
  "wasmer-compiler-singlepass",
  "wasmer-engine-dylib",
  "wasmer-engine-universal",
  "wasmer-vm",
  "wasmer",
]
# Enable queries support for an async client
async-client = ["async-trait", "namada_sdk/async-client"]

# Requires async traits to be safe to send across threads
async-send = []

# tendermint-rpc support
tendermint-rpc = [
  "async-client",
  "dep:tendermint-rpc",
  "namada_sdk/tendermint-rpc",
]
# tendermint-rpc HttpClient
http-client = ["tendermint-rpc/http-client"]

# for integration tests and test utilities
testing = [
  "namada_core/testing",
  "namada_ethereum_bridge/testing",
  "namada_proof_of_stake/testing",
  "namada_sdk/testing",
  "namada_state/testing",
  "async-client",
  "proptest",
  "tempfile",
]

namada-sdk = [
  "tendermint-rpc",
  "masp_primitives/transparent-inputs",
  "namada_sdk/namada-sdk",
  "namada_sdk/rand",
]

multicore = [
  "masp_proofs/multicore",
  "namada_sdk/multicore",
  "namada_token/multicore",
]
# Download MASP params if they're not present
download-params = ["namada_sdk/download-params"]
rand = ["namada_sdk/rand"]
migrations = [
  "namada_migrations",
  "linkme",
]

[dependencies]
namada_account = { path = "../account" }
namada_core = { path = "../core" }
namada_ethereum_bridge = { path = "../ethereum_bridge", default-features = false }
namada_gas = { path = "../gas" }
namada_governance = { path = "../governance" }
namada_ibc = { path = "../ibc" }
namada_macros = { path = "../macros" }
namada_migrations = { path = "../migrations", optional = true }
namada_parameters = { path = "../parameters" }
namada_proof_of_stake = { path = "../proof_of_stake" }
namada_replay_protection = { path = "../replay_protection" }
namada_sdk = { path = "../sdk", default-features = false }
namada_state = { path = "../state" }
namada_token = { path = "../token" }
namada_tx = { path = "../tx" }
namada_tx_env = { path = "../tx_env" }
namada_vote_ext = { path = "../vote_ext" }
namada_vp_env = { path = "../vp_env" }

async-trait = { version = "0.1.51", optional = true }
bimap.workspace = true
borsh.workspace = true
borsh-ext.workspace = true
circular-queue.workspace = true
clru.workspace = true
data-encoding.workspace = true
derivation-path.workspace = true
derivative.workspace = true
ethbridge-bridge-contract.workspace = true
ethers.workspace = true
eyre.workspace = true
futures.workspace = true
itertools.workspace = true
linkme = {workspace = true, optional = true}
loupe = { version = "0.1.3", optional = true }
masp_primitives.workspace = true
masp_proofs.workspace = true
num256.workspace = true
num-traits.workspace = true
orion.workspace = true
owo-colors = "3.5.0"
parity-wasm = { version = "0.45.0", features = ["sign_ext"], optional = true }
parse_duration = "2.1.1"
paste.workspace = true
proptest = { workspace = true, optional = true }
prost.workspace = true
rand.workspace = true
rand_core.workspace = true
rayon = { version = "=1.5.3", optional = true }
regex.workspace = true
ripemd.workspace = true
serde.workspace = true
serde_json.workspace = true
sha2.workspace = true
slip10_ed25519.workspace = true
tempfile = { version = "3.2.0", optional = true }
tendermint-rpc = { workspace = true, optional = true }
thiserror.workspace = true
tiny-bip39.workspace = true
tiny-hderive.workspace = true
toml.workspace = true
tracing.workspace = true
wasm-instrument = { version = "0.4.0", features = [
  "sign_ext",
], optional = true }
wasmer = { git = "https://github.com/heliaxdev/wasmer", rev = "255054f7f58b7b4a525f2fee6b9b86422d1ca15b", optional = true }
wasmer-cache = { git = "https://github.com/heliaxdev/wasmer", rev = "255054f7f58b7b4a525f2fee6b9b86422d1ca15b", optional = true }
wasmer-compiler-singlepass = { git = "https://github.com/heliaxdev/wasmer", rev = "255054f7f58b7b4a525f2fee6b9b86422d1ca15b", optional = true }
wasmer-engine-dylib = { git = "https://github.com/heliaxdev/wasmer", rev = "255054f7f58b7b4a525f2fee6b9b86422d1ca15b", optional = true }
wasmer-engine-universal = { git = "https://github.com/heliaxdev/wasmer", rev = "255054f7f58b7b4a525f2fee6b9b86422d1ca15b", optional = true }
wasmer-vm = { git = "https://github.com/heliaxdev/wasmer", rev = "255054f7f58b7b4a525f2fee6b9b86422d1ca15b", optional = true }
#  Greater versions break in `test_tx_stack_limiter` and `test_vp_stack_limiter`
wat = "=1.0.71"
wasmparser.workspace = true
zeroize.workspace = true

[target.'cfg(not(target_family = "wasm"))'.dependencies]
tokio = { workspace = true, features = ["full"] }

[target.'cfg(target_family = "wasm")'.dependencies]
tokio = { workspace = true, default-features = false, features = ["sync"] }
wasmtimer = "0.2.0"

[dev-dependencies]
namada_core = { path = "../core", default-features = false, features = [
  "testing",
] }
namada_ethereum_bridge = { path = "../ethereum_bridge", default-features = false, features = [
  "testing",
] }
namada_proof_of_stake = { path = "../proof_of_stake", default-features = false, features = [
  "testing",
] }
namada_sdk = { path = "../sdk", features = ["std", "testing"] }
namada_state = { path = "../state", features = ["testing"] }
namada_test_utils = { path = "../test_utils" }

assert_matches.workspace = true
async-trait.workspace = true
base58.workspace = true
byte-unit.workspace = true
ibc-testkit.workspace = true
k256.workspace = true
pretty_assertions.workspace = true
proptest.workspace = true
tempfile.workspace = true
test-log.workspace = true
tokio = { workspace = true, features = ["rt", "macros"] }
tracing-subscriber.workspace = true
