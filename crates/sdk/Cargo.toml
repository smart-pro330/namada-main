[package]
name = "namada_sdk"
description = "The main Namada SDK crate"
resolver = "2"
authors.workspace = true
edition.workspace = true
documentation.workspace = true
homepage.workspace = true
keywords.workspace = true
license.workspace = true
readme.workspace = true
repository.workspace = true
version.workspace = true

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[features]
default = ["tendermint-rpc", "download-params", "std", "rand", "migrations"]

multicore = ["masp_proofs/multicore"]

namada-sdk = ["tendermint-rpc", "masp_primitives/transparent-inputs"]

std = ["fd-lock"]
rand = ["dep:rand", "rand_core", "namada_core/rand"]

# tendermint-rpc support
tendermint-rpc = ["async-client", "dep:tendermint-rpc"]

wasm-runtime = ["namada_core/wasm-runtime"]

# Enable queries support for an async client
async-client = ["async-trait"]

async-send = []

# for integration tests and test utilities
testing = [
  "masp_primitives/test-dependencies",
  "namada_account/testing",
  "namada_core/testing",
  "namada_ethereum_bridge/testing",
  "namada_governance/testing",
  "namada_ibc/testing",
  "namada_proof_of_stake/testing",
  "namada_storage/testing",
  "namada_tx/testing",
  "async-client",
  "proptest",
  "jubjub",
  "bls12_381",
]

# Download MASP params if they're not present
download-params = ["masp_proofs/download-params"]
migrations = [
  "namada_migrations",
  "namada_account/migrations",
  "namada_core/migrations",
  "namada_ethereum_bridge/migrations",
  "namada_governance/migrations",
  "namada_proof_of_stake/migrations",
  "namada_state/migrations",
  "namada_storage/migrations",
  "namada_tx/migrations",
  "namada_vote_ext/migrations",
  "linkme",
]

[dependencies]
namada_account = { path = "../account" }
namada_core = { path = "../core" }
namada_ethereum_bridge = { path = "../ethereum_bridge", default-features = false }
namada_governance = { path = "../governance" }
namada_ibc = { path = "../ibc" }
namada_macros = { path = "../macros" }
namada_migrations = { path = "../migrations", optional = true }
namada_parameters = { path = "../parameters" }
namada_proof_of_stake = { path = "../proof_of_stake" }
namada_state = { path = "../state" }
namada_storage = { path = "../storage" }
namada_token = { path = "../token" }
namada_tx = { path = "../tx" }
namada_vote_ext = { path = "../vote_ext" }

async-trait = { version = "0.1.51", optional = true }
bimap.workspace = true
bls12_381 = { workspace = true, optional = true }
borsh.workspace = true
borsh-ext.workspace = true
circular-queue.workspace = true
data-encoding.workspace = true
derivation-path.workspace = true
ethbridge-bridge-contract.workspace = true
ethers.workspace = true
eyre.workspace = true
fd-lock = { workspace = true, optional = true }
futures.workspace = true
itertools.workspace = true
jubjub = { workspace = true, optional = true }
lazy_static.workspace = true
linkme = {workspace = true, optional = true}
masp_primitives.workspace = true
masp_proofs.workspace = true
num256.workspace = true
num-traits.workspace = true
orion.workspace = true
owo-colors = "3.5.0"
parse_duration = "2.1.1"
paste.workspace = true
proptest = { workspace = true, optional = true }
prost.workspace = true
rand = { workspace = true, optional = true }
rand_core = { workspace = true, optional = true }
ripemd.workspace = true
serde.workspace = true
serde_json.workspace = true
sha2.workspace = true
slip10_ed25519.workspace = true
tendermint-config.workspace = true
tendermint-rpc = { workspace = true, optional = true }
thiserror.workspace = true
tiny-bip39.workspace = true
tiny-hderive.workspace = true
toml.workspace = true
tracing.workspace = true
zeroize.workspace = true
regex = "1.10.2"

[target.'cfg(not(target_family = "wasm"))'.dependencies]
tokio = { workspace = true, features = ["full"] }

[target.'cfg(target_family = "wasm")'.dependencies]
tokio = { workspace = true, default-features = false, features = ["sync"] }
wasmtimer = "0.2.0"

[dev-dependencies]
namada_account = { path = "../account", features = ["testing"]}
namada_core = { path = "../core", default-features = false, features = [
  "rand",
  "testing",
] }
namada_ethereum_bridge = { path = "../ethereum_bridge", default-features = false, features = [
  "testing",
] }
namada_governance = { path = "../governance", features = ["testing"] }
namada_ibc = { path = "../ibc", features = ["testing"] }
namada_parameters = {path = "../parameters"}
namada_proof_of_stake = { path = "../proof_of_stake", default-features = false, features = [
  "testing",
] }
namada_state = { path = "../state", features = ["testing"] }
namada_storage = { path = "../storage", features = ["testing"] }
namada_test_utils = { path = "../test_utils" }
namada_tx = { path = "../tx", features = ["testing"]}
namada_vote_ext = {path = "../vote_ext"}

assert_matches.workspace = true
base58.workspace = true
bls12_381.workspace = true
jubjub.workspace = true
masp_primitives = { workspace = true, features = ["test-dependencies"] }
proptest.workspace = true
tempfile.workspace = true
